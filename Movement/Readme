# **Fuzzy Logic System**

This README explains the implementation and functionality of the fuzzy logic system, including the `Fuzzer` and `FuzzyController` classes. It also details the key concepts and formulae used in the fuzzification process, including the **rising edge** and **falling edge** calculations.

---

## **Table of Contents**
1. [Overview](#overview)
2. [Classes and Functionality](#classes-and-functionality)
3. [Fuzzification Formulae](#fuzzification-formulae)
4. [Membership Conditions](#membership-conditions)
5. [Defuzzification](#defuzzification)
6. [Rule Base Matching](#rule-base-matching)
7. [How to Use Fuzzer](#how-to-use-fuzzer)
8. [Usage Example](#usage-example)
9. [Acknowledgements](#acknowledgements)

---

## **Overview**
This fuzzy logic system is designed to handle fuzzification, rule evaluation, and defuzzification for a variety of control systems. It works with:
- A **rule base** stored in CSV format.
- Input-output mappings encoded in JSON.
- Dynamic fuzzification and defuzzification logic for system control.

The system comprises two main classes:
1. **`Fuzzer`**: Handles rule base initialization, fuzzification, and defuzzification.
2. **`FuzzyController`**: Manages fuzzy models, performs fuzzification, and calculates output decisions using triangular membership functions.

---

## **Classes and Functionality**

### **1. Fuzzer**
- **Purpose**: Handles rule base management, fuzzification, and defuzzification.
- **Key Methods**:
  - `initialize_rule_base`: Reads and encodes a CSV rule base using a JSON mapping.
  - `fuzzification`: Determines membership values for each input using rising and falling edges.
  - `defuzzification`: Calculates final output values using the centroid method.

### **2. FuzzyController**
- **Purpose**: Manages fuzzy models and performs triangular membership-based control.
- **Key Methods**:
  - `validate_fuzzy_models`: Ensures the fuzzy models are correctly structured.
  - `tri_mf_control`: Evaluates fuzzy models, calculates memberships, and computes outputs.

---

## **Fuzzification Formulae**

### **1. Rising Edge**
The **rising edge** represents the increasing membership value as the input approaches the peak of a triangular membership function.

**Formula**:
$$
\text{Rising Value (MF)} = \frac{\text{rising\_max} - \text{input\_value}}{\text{rising\_max} - \text{rising\_min}}
$$

### **2. Falling Edge**
The **falling edge** represents the decreasing membership value as the input moves away from the peak of the membership function.

**Formula**:
$$
\text{Falling Value (MF)} = \frac{\text{input\_value} - \text{falling\_min}}{\text{falling\_max} - \text{falling\_min}}
$$

---

## **Membership Conditions**

### **In Fuzzer**
The membership function follows these rules:
1. **Both Edges Active**: If the input falls between a rising and falling edge, both membership functions are calculated.
2. **Single Array Match**: If an input value falls exclusively under one array (rising or falling), that membership function is assigned a value of `1`.
3. **Outside the Range**: Membership is `0`.

### **In FuzzyController**
For the control mechanism, **only the falling edge** is used to calculate the membership. This simplifies the evaluation for decision-making.

---

## **Defuzzification**

Defuzzification converts fuzzy outputs into crisp values using the **centroid method**:

**Centroid Formula**:
$$
\text{Centroid} = \frac{\sum (\text{Membership} \times \text{Crisp\_Value})}{\sum \text{Membership}}
$$

This ensures a smooth, interpretable output.

---

## **Rule Base Matching**

The rule base matches inputs to corresponding outputs using combinations of fuzzy sets. Matching is performed by:
1. Generating all possible combinations of fuzzy inputs.
2. Finding rows in the rule base that match any combination.

**Firing Strength**:
\[
\text{Firing Strength} = \min (\text{Membership Values of Inputs})
\]

The firing strength determines the contribution of each rule to the final output.

---

## **How to Use Fuzzer**

1. **Setup Files**:
   - Prepare a JSON file mapping column names to values (e.g., `{ "Temperature": { "Cold": 0, "Hot": 1 } }`).
   - Prepare a CSV file containing the rule base with columns matching the JSON mappings.

2. **Initialize Fuzzer**:
   ```python
   fuzzer = Fuzzer(
       json_path="mapping.json",
       csv_path="rule_base.csv",
       inputs=['Temperature', 'Speed'],
       outputs=['FanSpeed']
   )
   ```

3. **Set Input Values**:
   Use `set_input` to specify input values:
   ```python
   fuzzer.set_input("Temperature", 0.75)
   fuzzer.set_input("Speed", 0.5)
   ```

4. **Run Fuzzification and Defuzzification**:
   Call the `Fuzzer` instance to perform calculations:
   ```python
   fuzzer()
   ```

5. **Retrieve Outputs**:
   Retrieve the computed outputs using:
   ```python
   outputs = fuzzer.get_outputs()
   print("Outputs:", outputs)
   ```

6. **Access Rule Base and Intermediate Values**:
   - Use `get_rule_base()` to view the rule base.
   - Use `get_results_array()` to view intermediate results.

---

## **Usage Example**

```python
# Example Usage of Fuzzer
fuzzer = Fuzzer(
    json_path="mapping.json",
    csv_path="rule_base.csv",
    inputs=['input1', 'input2'],
    outputs=['output1', 'output2']
)

# Set inputs
fuzzer.set_input('input1', 0.6)
fuzzer.set_input('input2', 0.4)

# Perform fuzzification and defuzzification
fuzzer()
print("Outputs:", fuzzer.get_outputs())

# Example Usage of FuzzyController
fuzzy_models = {
    'model1': {
        'model': MockFuzzyModel(['input1', 'input2'], {'output1': 0}),
        'ranges': [0.2, 0.5, 1.0]
    }
}

controller = FuzzyController(fuzzy_models, outputs=['output1'])
inputs = {'input1': 0.3, 'input2': 0.7}
decisions = controller.tri_mf_control(inputs)
print("Decisions:", decisions)
```

---

## **Acknowledgements**
This implementation was formatted, commented, and documented with the assistance of **ChatGPT**, leveraging its capabilities for clear explanation, code structuring, and providing mathematical insights.
